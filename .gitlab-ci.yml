# This file is a template, and might need editing before it works on your project. 
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new .gitlab-ci.yml file.
# You should not add this template to an existing .gitlab-ci.yml file by using the include: keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml


stages:
  - build
  - test
  - deploy

variables:
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: ecocards-db
  DB_HOST: postgres
  DB_NAME: ecocards-db
  DB_USER: postgres
  DB_PASSWORD: postgres
  FRONTEND_URL: http://localhost:3001

services:
  - name: postgres:17.2
    alias: postgres

before_script:
  - echo "Starting CI pipeline for Ecocards"

build_backend:
  stage: build
  image: node:23.5.0
  script:
    - cd backend
    - npm install
    - npm run build || echo "No explicit build step, skipping"
  artifacts:
    paths:
      - backend/node_modules/

test_backend:
  stage: test
  image: node:23.5.0
  script:
    - cd backend
    - npm install
    - npm run test
  artifacts:
    when: always
    reports:
      junit: backend/reports/junit/test-results.xml
    paths:
      - backend/reports/junit/test-results.xml

build_frontend:
  stage: build
  image: node:23.5.0
  script:
    - cd frontend
    - npm install 
    - npm run build
  artifacts:
    paths:
      - frontend/dist/

test_frontend:
  stage: test
  image: node:23.5.0
  script:
    - cd frontend
    - npm install 
    - npm run test
  artifacts:
    when: always
    reports:
      junit: frontend/reports/junit/jest-results.xml
    paths:
      - frontend/reports/junit/jest-results.xml

deploy:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker-compose -f docker-compose.yml up -d --build
  only:
    - main

cache:
  paths:
    - frontend/node_modules/
    - frontend/dist/
    - backend/node_modules/