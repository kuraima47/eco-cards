services:
  postgres:
    image: postgres:17.2
    container_name: ecocards-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ecocards-db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: cartes-dynamique-backend:latest
    container_name: ecocards-backend
    ports:
      - "3000:3000"
    environment:
      DB_HOST: postgres
      DB_NAME: ecocards-db
      DB_USER: postgres
      DB_PASSWORD: postgres
      FRONTEND_URL: http://localhost:3001
      NODE_ENV: ${NODE_ENV:-development}
    volumes:
      - ./backend:/app
      - backend_node_modules:/app/node_modules
    depends_on:
      - postgres
    restart: unless-stopped
    command: >
      sh -c "if [ ${NODE_ENV} = production ]; then npm run start; else npm run dev; fi"
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: cartes-dynamique-frontend:latest
    container_name: ecocards-frontend
    ports:
      - "3001:3001"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    environment:
      - NODE_OPTIONS=--max-old-space-size=8192
      - CHOKIDAR_USEPOLLING=true
      - NODE_ENV=${NODE_ENV:-development}
    depends_on:
      - backend
    restart: unless-stopped
    command: >
      sh -c "if [ ${NODE_ENV} = production ]; then npm run build && npm run start; else npm run dev-exposed; fi"

  nginx:
    container_name: ecocards-nginx
    build:
      context: ./nginx
      dockerfile: Dockerfile.dev
    ports:
      - "8080:8080"
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
    name: ecocards_data
  backend_node_modules:
  frontend_node_modules:
