<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="57" failures="0" errors="0" time="91.798">
  <testsuite name="QRCodeForm" errors="0" failures="0" skipped="0" timestamp="2025-03-25T15:43:45" time="21.176" tests="4">
    <testcase classname="QRCodeForm affiche les champs URL, couleur, upload logo et le bouton de téléchargement" name="QRCodeForm affiche les champs URL, couleur, upload logo et le bouton de téléchargement" time="0.457">
    </testcase>
    <testcase classname="QRCodeForm permet de modifier l&apos;URL" name="QRCodeForm permet de modifier l&apos;URL" time="0.03">
    </testcase>
    <testcase classname="QRCodeForm permet de changer la couleur du QR Code" name="QRCodeForm permet de changer la couleur du QR Code" time="0.018">
    </testcase>
    <testcase classname="QRCodeForm déclenche la fonction de téléchargement quand on clique sur le bouton" name="QRCodeForm déclenche la fonction de téléchargement quand on clique sur le bouton" time="0.023">
    </testcase>
  </testsuite>
  <testsuite name="useAdmin" errors="0" failures="0" skipped="0" timestamp="2025-03-25T15:43:45" time="22.203" tests="14">
    <testcase classname="useAdmin should initialize with user and load data" name="useAdmin should initialize with user and load data" time="0.418">
    </testcase>
    <testcase classname="useAdmin should add category" name="useAdmin should add category" time="0.06">
    </testcase>
    <testcase classname="useAdmin should update category" name="useAdmin should update category" time="0.059">
    </testcase>
    <testcase classname="useAdmin should delete category" name="useAdmin should delete category" time="0.057">
    </testcase>
    <testcase classname="useAdmin should add deck" name="useAdmin should add deck" time="0.055">
    </testcase>
    <testcase classname="useAdmin should get deck name by id" name="useAdmin should get deck name by id" time="0.055">
    </testcase>
    <testcase classname="useAdmin should refresh data when calling refresh" name="useAdmin should refresh data when calling refresh" time="0.057">
    </testcase>
    <testcase classname="useAdmin should update deck" name="useAdmin should update deck" time="0.189">
    </testcase>
    <testcase classname="useAdmin should delete deck" name="useAdmin should delete deck" time="0.059">
    </testcase>
    <testcase classname="useAdmin should add card" name="useAdmin should add card" time="0.06">
    </testcase>
    <testcase classname="useAdmin should update card" name="useAdmin should update card" time="0.061">
    </testcase>
    <testcase classname="useAdmin should delete card" name="useAdmin should delete card" time="0.058">
    </testcase>
    <testcase classname="useAdmin should handle error when adding category without selected deck" name="useAdmin should handle error when adding category without selected deck" time="0.058">
    </testcase>
    <testcase classname="useAdmin should handle importing cards" name="useAdmin should handle importing cards" time="0.058">
    </testcase>
  </testsuite>
  <testsuite name="useSessionSocket" errors="0" failures="0" skipped="0" timestamp="2025-03-25T15:43:47" time="21.953" tests="16">
    <testcase classname="useSessionSocket should join session when socket is connected" name="useSessionSocket should join session when socket is connected" time="0.915">
    </testcase>
    <testcase classname="useSessionSocket should set up event listeners for session events" name="useSessionSocket should set up event listeners for session events" time="0.011">
    </testcase>
    <testcase classname="useSessionSocket should clean up event listeners on unmount" name="useSessionSocket should clean up event listeners on unmount" time="0.008">
    </testcase>
    <testcase classname="useSessionSocket should emit phase change with retry" name="useSessionSocket should emit phase change with retry" time="0.023">
    </testcase>
    <testcase classname="useSessionSocket should emit card selection with retry" name="useSessionSocket should emit card selection with retry" time="0.018">
    </testcase>
    <testcase classname="useSessionSocket should emit end phase with retry" name="useSessionSocket should emit end phase with retry" time="0.012">
    </testcase>
    <testcase classname="useSessionSocket should emit end session with retry" name="useSessionSocket should emit end session with retry" time="0.013">
    </testcase>
    <testcase classname="useSessionSocket should handle socket disconnection" name="useSessionSocket should handle socket disconnection" time="0.008">
    </testcase>
    <testcase classname="useSessionSocket should handle socket errors during event emission" name="useSessionSocket should handle socket errors during event emission" time="0.011">
    </testcase>
    <testcase classname="useSessionSocket should handle callbacks being called with session data" name="useSessionSocket should handle callbacks being called with session data" time="0.019">
    </testcase>
    <testcase classname="useSessionSocket should handle card selection event" name="useSessionSocket should handle card selection event" time="0.024">
    </testcase>
    <testcase classname="useSessionSocket should handle phase change event" name="useSessionSocket should handle phase change event" time="0.009">
    </testcase>
    <testcase classname="useSessionSocket should handle round change event" name="useSessionSocket should handle round change event" time="0.008">
    </testcase>
    <testcase classname="useSessionSocket should handle error event" name="useSessionSocket should handle error event" time="0.007">
    </testcase>
    <testcase classname="useSessionSocket should emit CO2 estimation" name="useSessionSocket should emit CO2 estimation" time="0.01">
    </testcase>
    <testcase classname="useSessionSocket should emit acceptance level" name="useSessionSocket should emit acceptance level" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="useSocketConnection" errors="0" failures="0" skipped="0" timestamp="2025-03-25T15:43:47" time="27.327" tests="5">
    <testcase classname="useSocketConnection should initialize socket connection on mount" name="useSocketConnection should initialize socket connection on mount" time="0.827">
    </testcase>
    <testcase classname="useSocketConnection should call onConnect callback when socket connects" name="useSocketConnection should call onConnect callback when socket connects" time="0.011">
    </testcase>
    <testcase classname="useSocketConnection should call onDisconnect callback when socket disconnects" name="useSocketConnection should call onDisconnect callback when socket disconnects" time="0.013">
    </testcase>
    <testcase classname="useSocketConnection should call onError callback when connection error occurs" name="useSocketConnection should call onError callback when connection error occurs" time="0.011">
    </testcase>
    <testcase classname="useSocketConnection should disconnect socket when component unmounts" name="useSocketConnection should disconnect socket when component unmounts" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="ProtectedRoute" errors="0" failures="0" skipped="0" timestamp="2025-03-25T15:44:07" time="10.647" tests="3">
    <testcase classname="ProtectedRoute redirige vers /auth si l’utilisateur n’est pas authentifié" name="ProtectedRoute redirige vers /auth si l’utilisateur n’est pas authentifié" time="0.022">
    </testcase>
    <testcase classname="ProtectedRoute redirige vers / si l’utilisateur n’a pas le rôle requis" name="ProtectedRoute redirige vers / si l’utilisateur n’a pas le rôle requis" time="0.008">
    </testcase>
    <testcase classname="ProtectedRoute affiche le contenu si l’utilisateur est authentifié et a le bon rôle" name="ProtectedRoute affiche le contenu si l’utilisateur est authentifié et a le bon rôle" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="Home" errors="0" failures="0" skipped="0" timestamp="2025-03-25T15:44:08" time="10.094" tests="4">
    <testcase classname="Home affiche un message si un message est passé dans location.state" name="Home affiche un message si un message est passé dans location.state" time="0.059">
    </testcase>
    <testcase classname="Home n&apos;affiche pas de message si aucun message n&apos;est passé dans location.state" name="Home n&apos;affiche pas de message si aucun message n&apos;est passé dans location.state" time="0.015">
    </testcase>
    <testcase classname="Home affiche correctement toutes les features avec des icônes mockées" name="Home affiche correctement toutes les features avec des icônes mockées" time="0.033">
    </testcase>
    <testcase classname="Home redirige vers /games lorsqu&apos;on clique sur le bouton &quot;Commencer une Partie&quot;" name="Home redirige vers /games lorsqu&apos;on clique sur le bouton &quot;Commencer une Partie&quot;" time="0.02">
    </testcase>
  </testsuite>
  <testsuite name="DeckListView Component" errors="0" failures="0" skipped="0" timestamp="2025-03-25T15:43:57" time="54.387" tests="4">
    <testcase classname="DeckListView Component renders deck list correctly" name="DeckListView Component renders deck list correctly" time="0.297">
    </testcase>
    <testcase classname="DeckListView Component calls onSelectDeck when clicking on a deck" name="DeckListView Component calls onSelectDeck when clicking on a deck" time="0.037">
    </testcase>
    <testcase classname="DeckListView Component opens add deck modal when clicking on &apos;Nouveau Deck&apos; button" name="DeckListView Component opens add deck modal when clicking on &apos;Nouveau Deck&apos; button" time="0.027">
    </testcase>
    <testcase classname="DeckListView Component met à jour la liste des decks lorsqu&apos;un nouveau est ajouté" name="DeckListView Component met à jour la liste des decks lorsqu&apos;un nouveau est ajouté" time="0.022">
    </testcase>
  </testsuite>
  <testsuite name="QRCodeGenerator" errors="0" failures="0" skipped="0" timestamp="2025-03-25T15:44:02" time="50.25" tests="2">
    <testcase classname="QRCodeGenerator affiche les éléments principaux du générateur de QR Code" name="QRCodeGenerator affiche les éléments principaux du générateur de QR Code" time="0.192">
    </testcase>
    <testcase classname="QRCodeGenerator utilise correctement le hook useQRCode" name="QRCodeGenerator utilise correctement le hook useQRCode" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="useQRCode" errors="0" failures="0" skipped="0" timestamp="2025-03-25T15:44:07" time="49.368" tests="5">
    <testcase classname="useQRCode should initialize with default values" name="useQRCode should initialize with default values" time="0.106">
    </testcase>
    <testcase classname="useQRCode should update url when setUrl is called" name="useQRCode should update url when setUrl is called" time="0.001">
    </testcase>
    <testcase classname="useQRCode should handle logo upload" name="useQRCode should handle logo upload" time="0.002">
    </testcase>
    <testcase classname="useQRCode should handle logo deletion" name="useQRCode should handle logo deletion" time="0.001">
    </testcase>
    <testcase classname="useQRCode should download QR code" name="useQRCode should download QR code" time="0.001">
    </testcase>
  </testsuite>
</testsuites>